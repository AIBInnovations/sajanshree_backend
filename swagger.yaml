openapi: 3.0.3
info:
  title: Sajan Shree Backend - Auth API
  version: 1.0.0
  description: Authentication endpoints for Register and Login.
servers:
  - url: http://localhost:5000
tags:
  - name: Users
    description: User authentication
  - name: Orders
    description: Order management (protected)
  - name: Products
    description: Product configuration


paths:
  /api/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              default:
                value:
                  name: Alice Smith
                  email: alice@example.com
                  password: StrongPass#123
                  role: Staff
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                success:
                  value:
                    message: User registered successfully
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  value:
                    message: All fields are required
                alreadyExists:
                  value:
                    message: User already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/users/login:
    post:
      tags: [Users]
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value:
                  email: alice@example.com
                  password: StrongPass#123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
              examples:
                success:
                  value:
                    message: Login successful
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      _id: 66e2f2d0f4a5b6c0a16b2a1b
                      name: Alice Smith
                      email: alice@example.com
                      role: Staff
                      createdAt: 2025-09-12T10:00:00.000Z
                      updatedAt: 2025-09-12T10:00:00.000Z
                      __v: 0
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid:
                  value:
                    message: Invalid email or password
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/orders:
    post:
      tags: [Orders]
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
            examples:
              default:
                value:
                  customerName: John Doe
                  deliveryDate: 2025-09-30
                  orderType: walk-in
                  items:
                    - product: T-Shirt
                      sizes:
                        M: { quantity: 10, price: 200 }
                        L: { quantity: 5, price: 220 }
                  phone: "9998887777"
                  email: john@example.com
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    get:
      tags: [Orders]
      summary: List all orders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/orders/{id}:
    get:
      tags: [Orders]
      summary: Get order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    put:
      tags: [Orders]
      summary: Update order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    delete:
      tags: [Orders]
      summary: Delete order by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Order deleted successfully
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/products:
    post:
      tags: [Products]
      summary: Create a product configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdateRequest'
      responses:
        '201':
          description: Created product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    get:
      tags: [Products]
      summary: List products
      responses:
        '200':
          description: Array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/products/{id}:
    get:
      tags: [Products]
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    put:
      tags: [Products]
      summary: Update product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateUpdateRequest'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'
    delete:
      tags: [Products]
      summary: Delete product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Product deleted
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/products/{productName}/options:
    patch:
      tags: [Products]
      summary: Add an option to a product detail field
      parameters:
        - name: productName
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductOptionRequest'
      responses:
        '200':
          description: Updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product or detail not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Orders
    CreateOrderRequest:
      type: object
      required: [customerName, deliveryDate, product, phone, items]
      properties:
        orderId:
          type: string
          description: Optional custom order ID. If not provided, will be auto-generated
          example: ORD-5273
        customerName:
          type: string
          example: Bhavya Kothari
        deliveryDate:
          type: string
          format: date
          example: "2025-09-30T00:00:00.000Z"
        orderType:
          type: string
          example: walk-in
        product:
          type: string
          example: Pant Elastic
        phone:
          type: string
          example: "9644400090"
        email:
          type: string
          format: email
          example: bhavyakothari593@gmail.com
        items:
          type: array
          items:
            type: object
            required: [product, sizes]
            properties:
              product:
                type: string
                example: Pant Elastic
              sizes:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    quantity:
                      type: number
                      example: 5
                    price:
                      type: number
                      example: 100

    UpdateOrderRequest:
      type: object
      properties:
        customerName:
          type: string
        deliveryDate:
          type: string
          format: date
        orderType:
          type: string
        items:
          $ref: '#/components/schemas/CreateOrderRequest/properties/items'
        status:
          type: string
          enum: [Pending, Processing, Completed, Shipped]

    Order:
      type: object
      properties:
        _id:
          type: string
        customerName:
          type: string
        deliveryDate:
          type: string
          format: date-time
        status:
          type: string
        items:
          type: array
          items:
            type: object
            properties:
              category:
                type: string
              sizes:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    quantity:
                      type: number
                    price:
                      type: number
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateOrderResponse:
      type: object
      properties:
        message:
          type: string
          example: Order created successfully
        order:
          $ref: '#/components/schemas/Order'

    # Products
    ProductDetail:
      type: object
      properties:
        label:
          type: string
        key:
          type: string
        options:
          type: array
          items:
            type: string

    Product:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        sizes:
          type: array
          items:
            type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetail'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProductCreateUpdateRequest:
      type: object
      properties:
        name:
          type: string
        sizes:
          type: array
          items:
            type: string
        details:
          type: array
          items:
            $ref: '#/components/schemas/ProductDetail'

    AddProductOptionRequest:
      type: object
      required: [detailKey, option]
      properties:
        detailKey:
          type: string
        option:
          type: string
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          example: Alice Smith
        email:
          type: string
          format: email
          example: alice@example.com
        password:
          type: string
          format: password
          example: StrongPass#123
        role:
          type: string
          enum: [Admin, Staff]
          default: Staff

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: alice@example.com
        password:
          type: string
          format: password
          example: StrongPass#123

    UserPublic:
      type: object
      properties:
        _id:
          type: string
          example: 66e2f2d0f4a5b6c0a16b2a1b
        name:
          type: string
          example: Alice Smith
        email:
          type: string
          format: email
          example: alice@example.com
        role:
          type: string
          enum: [Admin, Staff]
          example: Staff
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer
          example: 0

    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token:
          type: string
          description: JWT token (expires in 1 day)
        user:
          $ref: '#/components/schemas/UserPublic'

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid email or password

    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Server Error
        error:
          type: object
          description: Additional server error details
security:
  - bearerAuth: []


