openapi: 3.0.3
info:
  title: Sajan Shree Backend - Auth API
  version: 1.0.0
  description: Authentication endpoints for Register and Login.
servers:
  - url: http://localhost:5000
tags:
  - name: Users
    description: User authentication


paths:
  /api/users/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              default:
                value:
                  name: Alice Smith
                  email: alice@example.com
                  password: StrongPass#123
                  role: Staff
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
              examples:
                success:
                  value:
                    message: User registered successfully
        '400':
          description: Validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missingFields:
                  value:
                    message: All fields are required
                alreadyExists:
                  value:
                    message: User already exists
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

  /api/users/login:
    post:
      tags: [Users]
      summary: Login an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              default:
                value:
                  email: alice@example.com
                  password: StrongPass#123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccessResponse'
              examples:
                success:
                  value:
                    message: Login successful
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    user:
                      _id: 66e2f2d0f4a5b6c0a16b2a1b
                      name: Alice Smith
                      email: alice@example.com
                      role: Staff
                      createdAt: 2025-09-12T10:00:00.000Z
                      updatedAt: 2025-09-12T10:00:00.000Z
                      __v: 0
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid:
                  value:
                    message: Invalid email or password
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required: [name, email, password]
      properties:
        name:
          type: string
          example: Alice Smith
        email:
          type: string
          format: email
          example: alice@example.com
        password:
          type: string
          format: password
          example: StrongPass#123
        role:
          type: string
          enum: [Admin, Staff]
          default: Staff

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: alice@example.com
        password:
          type: string
          format: password
          example: StrongPass#123

    UserPublic:
      type: object
      properties:
        _id:
          type: string
          example: 66e2f2d0f4a5b6c0a16b2a1b
        name:
          type: string
          example: Alice Smith
        email:
          type: string
          format: email
          example: alice@example.com
        role:
          type: string
          enum: [Admin, Staff]
          example: Staff
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        __v:
          type: integer
          example: 0

    LoginSuccessResponse:
      type: object
      properties:
        message:
          type: string
          example: Login successful
        token:
          type: string
          description: JWT token (expires in 1 day)
        user:
          $ref: '#/components/schemas/UserPublic'

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Invalid email or password

    ServerErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: Server Error
        error:
          type: object
          description: Additional server error details
security:
  - bearerAuth: []


